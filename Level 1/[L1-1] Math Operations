# 数学运算(Math Operations)

## 1. 四则运算(Four Fundamental Rules)

和数学中的四则运算一样，计算机中也有相应的四则运算（加、减、乘、除）。

在不同的编程语言中，四则运算符大多都是都是固定的符号："+"，"-"，"*"，"/"，均为二目运算符。

此外，将减号"-"放在变量名前，会变为单目运算符，功能为取负数，如：

```java
int a = 1;
a = -a;
System.out.println("a = " + a);
// output : a = -1
```

```python
a = 1
a = -a
print("a =", a)
# output : a = -1
```

在 Python3 中，除了普通的除法运算符 "/" 之外，还多出了整除运算 "//" ，如：

```python
a = 10 // 3
print("a =", a)
# output : a = 3
```

## 2. 自增、自减运算

在一些语言中(如 C++，Java)，存在两种运算符：自增运算符("++")，自减运算符("--")。

自增自减运算符是一种单目运算符，使用方法如下：

```java
int a = 1, b = 1, c = 1, d = 1;
a++;
++b;
c--;
--d;
System.out.println(a);
System.out.println(b);
System.out.println(c);
System.out.println(d);
/*
output :
2
2
0
0
*/
```

可以看出，`a++` 和 `++a` 在结果上等同于 `a += 1`，`a--` 和 `--a` 在结果上等同于 `a -= 1`。

**那么自增自减运算符放在变量名前后，存在什么区别呢？**

自增自减运算符放在变量前面时先执行自增自减，后进行运算；自增自减运算符放在变量后面：先进行运算，后执行自增自减，代码执行情况如下：

```java
int a = 1, b = 1;
System.out.println(a + " " + b);
System.out.println(a++);
System.out.println(++b);
/*
output :
1 1
1
2
*/
```

可以看出，最开始变量 $a$ 和 $b$ 的值都是 $1$，首先打印的是`a++`，此时先输出 $1$，然后计算 `a += 1`；然后打印的是 `++b`，此时先计算  `b += 1`，然后打印 $2$。

## 3. 求幂运算

在少部分语言中(如 Python，PHP)，还有一种求幂运算符 "**"，如：

```python
a = 5 ** 2
print("a =", a)
# output : a = 25
```

而在其他语言中，往往求幂运算需要用其他方法实现，如 Java 中的 `Math.pow()`。

```Java
System.out.println(Math.pow(5, 2));
// output : 25.0
// Java 中的 Math.pow() 返回的是浮点型
```

## 4. 取模运算(Modulus Operation)和取余运算(Remainder Operation)

在计算机语言中，存在一种算术运算符：%。

% 运算是一个二目运算，由两个操作数组成，如 "a % b"，作用是求 a 除以 b 的余数。

公式：对于一个**正整数** $n$ 而言，一定存在等式 $n = k * p + r$ ，代表 $n$ 可以被拆分成 $k$ 个 $p$ 并且余下一个 $r$。

例如："13 % 3 = 1"，其原因为：$13 = 4 * 3 + 1$ ，也就是说，上面公式中的 r 就是 n % p 的结果。

在数学中，存在一种相似的运算，被称为取余运算，两者在对**正整数**的运算中完全没有区别，但是对于负整数的运算，则会存在以下区别。

取余公式中的 $k$ 要向 $0$ 靠拢，取模公式中的 $k$ 要向负无穷(-∞)靠拢，具体区别如下：

| 运算方法       | 求 $k$                                                | 运算公式             | 答案 |
| -------------- | ----------------------------------------------------- | -------------------- | ---- |
| -13 对 3 取模  | -13 / 3 = -4.3333，$k$ 向负无穷(-∞)靠拢，-4.333 取 -5 | (-13) = -5 * 3 + 2   | 2    |
| 13 对 -3 取模  | 13 / -3 = -4.3333，$k$ 向负无穷(-∞)靠拢，-4.333 取 -5 | 13 = (-5) * (-3) - 2 | -2   |
| -13 对 -3 取模 | -13 / -3 = 4.3333，$k$ 向负无穷(-∞)靠拢，4.333 取 4   | (-13) = 4 * (-3) - 1 | -1   |
| -13 对 3 取余  | -13 / 3 = -4.3333，$k$ 向 $0$ 靠拢，-4.333 取 -4      | (-13) = (-4) * 3 - 1 | -1   |
| 13 对 -3 取余  | 13 / -3 = -4.3333，$k$ 向 $0$ 靠拢，-4.333 取 -4      | 13 = (-4) * (-3) + 1 | 1    |
| -13 对 -3 取余 | -13 / -3 = 4.3333，$k$ 向 $0$ 靠拢，4.333 取 4        | (-13) = 4 * (-3) - 1 | -1   |

由于取模运算和取余运算在负整数上的运算不同，因此不同的语言在实现 % 运算的时候也会采用不同的运算方法。

比如在 Python 语言中，% 运算是取模运算，而在 Java 语言中，% 运算则是取余运算，具体如下：

```python
print((-13) % (3))
print(13 % (-3))
print((-13) % (-3))
'''
output :
2
-2
-1
'''
```

```Java
System.out.println((-13) % 3);
System.out.println(13 % (-3));
System.out.println((-13) % (-3));
/*
output :
-1
1
-1
*/
```

取模运算（取余运算）不仅在数学、数论中有着重要地位，在各种算法中也是十分关键的组成部分（如哈希算法）。

