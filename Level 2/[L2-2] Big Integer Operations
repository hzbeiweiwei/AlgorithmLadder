# 大数运算(Big Integer Operations)

## 1.大数加法(Addition of large numbers)

当计算机遇到 10 + 10 的问题时，可以快速的给出答案，等于2。

当计算机遇到 $10^5$+ $10^5$ 的问题时，可以快速的给出答案，等于 200000。

那么计算机需要计算 $10^{50}$+ $10^{50}$ 的问题时，该怎么办呢？



这个时候Python仍然可以计算，完全不受影响：

```python
a = 10 ** 50
b = 10 ** 50
print(a + b)
# output : 200000000000000000000000000000000000000000000000000
```



而Java的计算中就会遇到错误，我们可以知道在Java中：

**int类型：**

- 最小值是 **-2,147,483,648（-$2^{31}$）**；
- 最大值是 **2,147,483,647（$2^{31}$ - 1）**；

**long类型：**

- 最小值是 **-9,223,372,036,854,775,808（-$2^{63}$）**；
- 最大值是 **9,223,372,036,854,775,807（$2^{63 }$ - 1）**；



因此遇到此类问题，就可以使用**模拟法**来解决。

所谓模拟法，就是在小学一年级的时候，老师教我们的**列竖式计算大法**。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/test.png?raw=true" style="zoom: 67%;" />



那么在计算机中2021042899+199903079我们该如何计算呢？

**第一步：**在数学中，我们是从最后一位开始计算，而在计算机中，数组是从下标0开始计算。因此，需要把输入的字符串倒序存储。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/text1.png?raw=true" style="zoom:67%;" />

**第二步：**计算最开始的两个数字，9+9=18 ，将个位数`8`存放在第一个位置，十位数`1`加到下一个位置。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/text2.png?raw=true" style="zoom:67%;" />

**第三步：**继续计算第二列数字，1+9+7=17，同理将个位数`7`存放在第二个位置，十位数`1`加到下一个位置。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/text3.png?raw=true" style="zoom:67%;" />

**第四步：**以此类推。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/text4.png?raw=true" style="zoom:67%;" />



<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/text5.png?raw=true" style="zoom:67%;" />

**思考：**如果遇到9999999999+999999999的情况，有最高位的进位该如何处理？

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/text6.png?raw=true" style="zoom:67%;" />



接下来让我们一起学习一下Java的代码：

```java
public class Solution {
    /**
     * @param num1 a non-negative integers
     * @param num2 a non-negative integers
     * @return return sum of num1 and num2
     */
    public String addStrings(String num1, String num2) {
        // Write your code here
        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        String result = "";
        while (i >= 0 || j >= 0) {
            if (i >= 0) {
                carry += num1.charAt(i--) - '0';
            }
            if (j >= 0) {
                carry += num2.charAt(j--) - '0';
            }
            result = carry % 10 + result;
            carry /= 10;
        }
        return carry > 0 ? "1" + result : result; //在这里处理最高位的进位
    }
}
```







